/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_HARDWARE_H
#define _MOCK_HARDWARE_H

#include "unity.h"
#include "hardware.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_hardware_Init(void);
void mock_hardware_Destroy(void);
void mock_hardware_Verify(void);




#define pinMode_Ignore() pinMode_CMockIgnore()
void pinMode_CMockIgnore(void);
#define pinMode_Expect(cmock_arg1, cmock_arg2) pinMode_CMockExpect(__LINE__, cmock_arg1, cmock_arg2)
void pinMode_CMockExpect(UNITY_LINE_TYPE cmock_line, uint8_t cmock_arg1, uint8_t cmock_arg2);
typedef void (* CMOCK_pinMode_CALLBACK)(uint8_t cmock_arg1, uint8_t cmock_arg2, int cmock_num_calls);
void pinMode_AddCallback(CMOCK_pinMode_CALLBACK Callback);
void pinMode_Stub(CMOCK_pinMode_CALLBACK Callback);
#define pinMode_StubWithCallback pinMode_Stub
#define digitalRead_IgnoreAndReturn(cmock_retval) digitalRead_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void digitalRead_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define digitalRead_ExpectAndReturn(cmock_arg1, cmock_retval) digitalRead_CMockExpectAndReturn(__LINE__, cmock_arg1, cmock_retval)
void digitalRead_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_arg1, int cmock_to_return);
typedef int (* CMOCK_digitalRead_CALLBACK)(int cmock_arg1, int cmock_num_calls);
void digitalRead_AddCallback(CMOCK_digitalRead_CALLBACK Callback);
void digitalRead_Stub(CMOCK_digitalRead_CALLBACK Callback);
#define digitalRead_StubWithCallback digitalRead_Stub
#define i2cReadRegister_IgnoreAndReturn(cmock_retval) i2cReadRegister_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void i2cReadRegister_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define i2cReadRegister_ExpectAndReturn(registerAddress, cmock_retval) i2cReadRegister_CMockExpectAndReturn(__LINE__, registerAddress, cmock_retval)
void i2cReadRegister_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int registerAddress, int cmock_to_return);
typedef int (* CMOCK_i2cReadRegister_CALLBACK)(int registerAddress, int cmock_num_calls);
void i2cReadRegister_AddCallback(CMOCK_i2cReadRegister_CALLBACK Callback);
void i2cReadRegister_Stub(CMOCK_i2cReadRegister_CALLBACK Callback);
#define i2cReadRegister_StubWithCallback i2cReadRegister_Stub
#define write_lcd_Ignore() write_lcd_CMockIgnore()
void write_lcd_CMockIgnore(void);
#define write_lcd_Expect(cmock_arg1) write_lcd_CMockExpect(__LINE__, cmock_arg1)
void write_lcd_CMockExpect(UNITY_LINE_TYPE cmock_line, uint8_t cmock_arg1);
typedef void (* CMOCK_write_lcd_CALLBACK)(uint8_t cmock_arg1, int cmock_num_calls);
void write_lcd_AddCallback(CMOCK_write_lcd_CALLBACK Callback);
void write_lcd_Stub(CMOCK_write_lcd_CALLBACK Callback);
#define write_lcd_StubWithCallback write_lcd_Stub

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
